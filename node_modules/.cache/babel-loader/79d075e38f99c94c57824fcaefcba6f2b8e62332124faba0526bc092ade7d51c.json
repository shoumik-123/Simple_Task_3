{"ast":null,"code":"import { memo, notUndefined, approxEqual } from \"./utils.js\";\nconst defaultKeyExtractor = index => index;\nconst defaultRangeExtractor = range => {\n  const start = Math.max(range.startIndex - range.overscan, 0);\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1);\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\nconst observeElementRect = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const handler = rect => {\n    const {\n      width,\n      height\n    } = rect;\n    cb({\n      width: Math.round(width),\n      height: Math.round(height)\n    });\n  };\n  handler(element.getBoundingClientRect());\n  if (typeof ResizeObserver === \"undefined\") {\n    return () => {};\n  }\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    if (entry == null ? void 0 : entry.borderBoxSize) {\n      const box = entry.borderBoxSize[0];\n      if (box) {\n        handler({\n          width: box.inlineSize,\n          height: box.blockSize\n        });\n        return;\n      }\n    }\n    handler(element.getBoundingClientRect());\n  });\n  observer.observe(element, {\n    box: \"border-box\"\n  });\n  return () => {\n    observer.unobserve(element);\n  };\n};\nconst observeWindowRect = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const handler = () => {\n    cb({\n      width: element.innerWidth,\n      height: element.innerHeight\n    });\n  };\n  handler();\n  element.addEventListener(\"resize\", handler, {\n    passive: true\n  });\n  return () => {\n    element.removeEventListener(\"resize\", handler);\n  };\n};\nconst observeElementOffset = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const handler = () => {\n    cb(element[instance.options.horizontal ? \"scrollLeft\" : \"scrollTop\"]);\n  };\n  handler();\n  element.addEventListener(\"scroll\", handler, {\n    passive: true\n  });\n  return () => {\n    element.removeEventListener(\"scroll\", handler);\n  };\n};\nconst observeWindowOffset = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const handler = () => {\n    cb(element[instance.options.horizontal ? \"scrollX\" : \"scrollY\"]);\n  };\n  handler();\n  element.addEventListener(\"scroll\", handler, {\n    passive: true\n  });\n  return () => {\n    element.removeEventListener(\"scroll\", handler);\n  };\n};\nconst measureElement = (element, entry, instance) => {\n  if (entry == null ? void 0 : entry.borderBoxSize) {\n    const box = entry.borderBoxSize[0];\n    if (box) {\n      const size = Math.round(box[instance.options.horizontal ? \"inlineSize\" : \"blockSize\"]);\n      return size;\n    }\n  }\n  return Math.round(element.getBoundingClientRect()[instance.options.horizontal ? \"width\" : \"height\"]);\n};\nconst windowScroll = (offset, _ref, instance) => {\n  let {\n    adjustments = 0,\n    behavior\n  } = _ref;\n  var _a, _b;\n  const toOffset = offset + adjustments;\n  (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n    [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n    behavior\n  });\n};\nconst elementScroll = (offset, _ref2, instance) => {\n  let {\n    adjustments = 0,\n    behavior\n  } = _ref2;\n  var _a, _b;\n  const toOffset = offset + adjustments;\n  (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n    [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n    behavior\n  });\n};\nclass Virtualizer {\n  constructor(opts) {\n    var _this = this;\n    this.unsubs = [];\n    this.scrollElement = null;\n    this.isScrolling = false;\n    this.isScrollingTimeoutId = null;\n    this.scrollToIndexTimeoutId = null;\n    this.measurementsCache = [];\n    this.itemSizeCache = /* @__PURE__ */new Map();\n    this.pendingMeasuredCacheIndexes = [];\n    this.scrollDirection = null;\n    this.scrollAdjustments = 0;\n    this.measureElementCache = /* @__PURE__ */new Map();\n    this.observer = /* @__PURE__ */(() => {\n      let _ro = null;\n      const get = () => {\n        if (_ro) {\n          return _ro;\n        } else if (typeof ResizeObserver !== \"undefined\") {\n          return _ro = new ResizeObserver(entries => {\n            entries.forEach(entry => {\n              this._measureElement(entry.target, entry);\n            });\n          });\n        } else {\n          return null;\n        }\n      };\n      return {\n        disconnect: () => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.disconnect();\n        },\n        observe: target => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.observe(target, {\n            box: \"border-box\"\n          });\n        },\n        unobserve: target => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.unobserve(target);\n        }\n      };\n    })();\n    this.range = null;\n    this.setOptions = opts2 => {\n      Object.entries(opts2).forEach(_ref3 => {\n        let [key, value] = _ref3;\n        if (typeof value === \"undefined\") delete opts2[key];\n      });\n      this.options = {\n        debug: false,\n        initialOffset: 0,\n        overscan: 1,\n        paddingStart: 0,\n        paddingEnd: 0,\n        scrollPaddingStart: 0,\n        scrollPaddingEnd: 0,\n        horizontal: false,\n        getItemKey: defaultKeyExtractor,\n        rangeExtractor: defaultRangeExtractor,\n        onChange: () => {},\n        measureElement,\n        initialRect: {\n          width: 0,\n          height: 0\n        },\n        scrollMargin: 0,\n        gap: 0,\n        scrollingDelay: 150,\n        indexAttribute: \"data-index\",\n        initialMeasurementsCache: [],\n        lanes: 1,\n        ...opts2\n      };\n    };\n    this.notify = sync => {\n      var _a, _b;\n      (_b = (_a = this.options).onChange) == null ? void 0 : _b.call(_a, this, sync);\n    };\n    this.maybeNotify = memo(() => {\n      this.calculateRange();\n      return [this.isScrolling, this.range ? this.range.startIndex : null, this.range ? this.range.endIndex : null];\n    }, isScrolling => {\n      this.notify(isScrolling);\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"maybeNotify\",\n      debug: () => this.options.debug,\n      initialDeps: [this.isScrolling, this.range ? this.range.startIndex : null, this.range ? this.range.endIndex : null]\n    });\n    this.cleanup = () => {\n      this.unsubs.filter(Boolean).forEach(d => d());\n      this.unsubs = [];\n      this.scrollElement = null;\n    };\n    this._didMount = () => {\n      this.measureElementCache.forEach(this.observer.observe);\n      return () => {\n        this.observer.disconnect();\n        this.cleanup();\n      };\n    };\n    this._willUpdate = () => {\n      const scrollElement = this.options.getScrollElement();\n      if (this.scrollElement !== scrollElement) {\n        this.cleanup();\n        this.scrollElement = scrollElement;\n        this._scrollToOffset(this.scrollOffset, {\n          adjustments: void 0,\n          behavior: void 0\n        });\n        this.unsubs.push(this.options.observeElementRect(this, rect => {\n          this.scrollRect = rect;\n          this.maybeNotify();\n        }));\n        this.unsubs.push(this.options.observeElementOffset(this, offset => {\n          this.scrollAdjustments = 0;\n          if (this.scrollOffset === offset) {\n            return;\n          }\n          if (this.isScrollingTimeoutId !== null) {\n            clearTimeout(this.isScrollingTimeoutId);\n            this.isScrollingTimeoutId = null;\n          }\n          this.isScrolling = true;\n          this.scrollDirection = this.scrollOffset < offset ? \"forward\" : \"backward\";\n          this.scrollOffset = offset;\n          this.maybeNotify();\n          this.isScrollingTimeoutId = setTimeout(() => {\n            this.isScrollingTimeoutId = null;\n            this.isScrolling = false;\n            this.scrollDirection = null;\n            this.maybeNotify();\n          }, this.options.scrollingDelay);\n        }));\n      }\n    };\n    this.getSize = () => {\n      return this.scrollRect[this.options.horizontal ? \"width\" : \"height\"];\n    };\n    this.memoOptions = memo(() => [this.options.count, this.options.paddingStart, this.options.scrollMargin, this.options.getItemKey], (count, paddingStart, scrollMargin, getItemKey) => {\n      this.pendingMeasuredCacheIndexes = [];\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey\n      };\n    }, {\n      key: false\n    });\n    this.getFurthestMeasurement = (measurements, index) => {\n      const furthestMeasurementsFound = /* @__PURE__ */new Map();\n      const furthestMeasurements = /* @__PURE__ */new Map();\n      for (let m = index - 1; m >= 0; m--) {\n        const measurement = measurements[m];\n        if (furthestMeasurementsFound.has(measurement.lane)) {\n          continue;\n        }\n        const previousFurthestMeasurement = furthestMeasurements.get(measurement.lane);\n        if (previousFurthestMeasurement == null || measurement.end > previousFurthestMeasurement.end) {\n          furthestMeasurements.set(measurement.lane, measurement);\n        } else if (measurement.end < previousFurthestMeasurement.end) {\n          furthestMeasurementsFound.set(measurement.lane, true);\n        }\n        if (furthestMeasurementsFound.size === this.options.lanes) {\n          break;\n        }\n      }\n      return furthestMeasurements.size === this.options.lanes ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n        if (a.end === b.end) {\n          return a.index - b.index;\n        }\n        return a.end - b.end;\n      })[0] : void 0;\n    };\n    this.getMeasurements = memo(() => [this.memoOptions(), this.itemSizeCache], (_ref4, itemSizeCache) => {\n      let {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey\n      } = _ref4;\n      const min = this.pendingMeasuredCacheIndexes.length > 0 ? Math.min(...this.pendingMeasuredCacheIndexes) : 0;\n      this.pendingMeasuredCacheIndexes = [];\n      const measurements = this.measurementsCache.slice(0, min);\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i);\n        const furthestMeasurement = this.options.lanes === 1 ? measurements[i - 1] : this.getFurthestMeasurement(measurements, i);\n        const start = furthestMeasurement ? furthestMeasurement.end + this.options.gap : paddingStart + scrollMargin;\n        const measuredSize = itemSizeCache.get(key);\n        const size = typeof measuredSize === \"number\" ? measuredSize : this.options.estimateSize(i);\n        const end = start + size;\n        const lane = furthestMeasurement ? furthestMeasurement.lane : i % this.options.lanes;\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane\n        };\n      }\n      this.measurementsCache = measurements;\n      return measurements;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getMeasurements\",\n      debug: () => this.options.debug\n    });\n    this.calculateRange = memo(() => [this.getMeasurements(), this.getSize(), this.scrollOffset], (measurements, outerSize, scrollOffset) => {\n      return this.range = measurements.length > 0 && outerSize > 0 ? calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset\n      }) : null;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"calculateRange\",\n      debug: () => this.options.debug\n    });\n    this.getIndexes = memo(() => [this.options.rangeExtractor, this.calculateRange(), this.options.overscan, this.options.count], (rangeExtractor, range, overscan, count) => {\n      return range === null ? [] : rangeExtractor({\n        ...range,\n        overscan,\n        count\n      });\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getIndexes\",\n      debug: () => this.options.debug\n    });\n    this.indexFromElement = node => {\n      const attributeName = this.options.indexAttribute;\n      const indexStr = node.getAttribute(attributeName);\n      if (!indexStr) {\n        console.warn(`Missing attribute name '${attributeName}={index}' on measured element.`);\n        return -1;\n      }\n      return parseInt(indexStr, 10);\n    };\n    this._measureElement = (node, entry) => {\n      const item = this.measurementsCache[this.indexFromElement(node)];\n      if (!item || !node.isConnected) {\n        this.measureElementCache.forEach((cached, key) => {\n          if (cached === node) {\n            this.observer.unobserve(node);\n            this.measureElementCache.delete(key);\n          }\n        });\n        return;\n      }\n      const prevNode = this.measureElementCache.get(item.key);\n      if (prevNode !== node) {\n        if (prevNode) {\n          this.observer.unobserve(prevNode);\n        }\n        this.observer.observe(node);\n        this.measureElementCache.set(item.key, node);\n      }\n      const measuredItemSize = this.options.measureElement(node, entry, this);\n      this.resizeItem(item, measuredItemSize);\n    };\n    this.resizeItem = (item, size) => {\n      const itemSize = this.itemSizeCache.get(item.key) ?? item.size;\n      const delta = size - itemSize;\n      if (delta !== 0) {\n        if (item.start < this.scrollOffset + this.scrollAdjustments) {\n          if (process.env.NODE_ENV !== \"production\" && this.options.debug) {\n            console.info(\"correction\", delta);\n          }\n          this._scrollToOffset(this.scrollOffset, {\n            adjustments: this.scrollAdjustments += delta,\n            behavior: void 0\n          });\n        }\n        this.pendingMeasuredCacheIndexes.push(item.index);\n        this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size));\n        this.notify(false);\n      }\n    };\n    this.measureElement = node => {\n      if (!node) {\n        return;\n      }\n      this._measureElement(node, void 0);\n    };\n    this.getVirtualItems = memo(() => [this.getIndexes(), this.getMeasurements()], (indexes, measurements) => {\n      const virtualItems = [];\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k];\n        const measurement = measurements[i];\n        virtualItems.push(measurement);\n      }\n      return virtualItems;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getIndexes\",\n      debug: () => this.options.debug\n    });\n    this.getVirtualItemForOffset = offset => {\n      const measurements = this.getMeasurements();\n      return notUndefined(measurements[findNearestBinarySearch(0, measurements.length - 1, index => notUndefined(measurements[index]).start, offset)]);\n    };\n    this.getOffsetForAlignment = (toOffset, align) => {\n      const size = this.getSize();\n      if (align === \"auto\") {\n        if (toOffset <= this.scrollOffset) {\n          align = \"start\";\n        } else if (toOffset >= this.scrollOffset + size) {\n          align = \"end\";\n        } else {\n          align = \"start\";\n        }\n      }\n      if (align === \"start\") {\n        toOffset = toOffset;\n      } else if (align === \"end\") {\n        toOffset = toOffset - size;\n      } else if (align === \"center\") {\n        toOffset = toOffset - size / 2;\n      }\n      const scrollSizeProp = this.options.horizontal ? \"scrollWidth\" : \"scrollHeight\";\n      const scrollSize = this.scrollElement ? \"document\" in this.scrollElement ? this.scrollElement.document.documentElement[scrollSizeProp] : this.scrollElement[scrollSizeProp] : 0;\n      const maxOffset = scrollSize - this.getSize();\n      return Math.max(Math.min(maxOffset, toOffset), 0);\n    };\n    this.getOffsetForIndex = function (index) {\n      let align = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"auto\";\n      index = Math.max(0, Math.min(index, _this.options.count - 1));\n      const measurement = notUndefined(_this.getMeasurements()[index]);\n      if (align === \"auto\") {\n        if (measurement.end >= _this.scrollOffset + _this.getSize() - _this.options.scrollPaddingEnd) {\n          align = \"end\";\n        } else if (measurement.start <= _this.scrollOffset + _this.options.scrollPaddingStart) {\n          align = \"start\";\n        } else {\n          return [_this.scrollOffset, align];\n        }\n      }\n      const toOffset = align === \"end\" ? measurement.end + _this.options.scrollPaddingEnd : measurement.start - _this.options.scrollPaddingStart;\n      return [_this.getOffsetForAlignment(toOffset, align), align];\n    };\n    this.isDynamicMode = () => this.measureElementCache.size > 0;\n    this.cancelScrollToIndex = () => {\n      if (this.scrollToIndexTimeoutId !== null) {\n        clearTimeout(this.scrollToIndexTimeoutId);\n        this.scrollToIndexTimeoutId = null;\n      }\n    };\n    this.scrollToOffset = function (toOffset) {\n      let {\n        align = \"start\",\n        behavior\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      _this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && _this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      _this._scrollToOffset(_this.getOffsetForAlignment(toOffset, align), {\n        adjustments: void 0,\n        behavior\n      });\n    };\n    this.scrollToIndex = function (index) {\n      let {\n        align: initialAlign = \"auto\",\n        behavior\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      index = Math.max(0, Math.min(index, _this.options.count - 1));\n      _this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && _this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      const [toOffset, align] = _this.getOffsetForIndex(index, initialAlign);\n      _this._scrollToOffset(toOffset, {\n        adjustments: void 0,\n        behavior\n      });\n      if (behavior !== \"smooth\" && _this.isDynamicMode()) {\n        _this.scrollToIndexTimeoutId = setTimeout(() => {\n          _this.scrollToIndexTimeoutId = null;\n          const elementInDOM = _this.measureElementCache.has(_this.options.getItemKey(index));\n          if (elementInDOM) {\n            const [toOffset2] = _this.getOffsetForIndex(index, align);\n            if (!approxEqual(toOffset2, _this.scrollOffset)) {\n              _this.scrollToIndex(index, {\n                align,\n                behavior\n              });\n            }\n          } else {\n            _this.scrollToIndex(index, {\n              align,\n              behavior\n            });\n          }\n        });\n      }\n    };\n    this.scrollBy = function (delta) {\n      let {\n        behavior\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      _this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && _this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      _this._scrollToOffset(_this.scrollOffset + delta, {\n        adjustments: void 0,\n        behavior\n      });\n    };\n    this.getTotalSize = () => {\n      var _a;\n      const measurements = this.getMeasurements();\n      let end;\n      if (measurements.length === 0) {\n        end = this.options.paddingStart;\n      } else {\n        end = this.options.lanes === 1 ? ((_a = measurements[measurements.length - 1]) == null ? void 0 : _a.end) ?? 0 : Math.max(...measurements.slice(-this.options.lanes).map(m => m.end));\n      }\n      return end - this.options.scrollMargin + this.options.paddingEnd;\n    };\n    this._scrollToOffset = (offset, _ref5) => {\n      let {\n        adjustments,\n        behavior\n      } = _ref5;\n      this.options.scrollToFn(offset, {\n        behavior,\n        adjustments\n      }, this);\n    };\n    this.measure = () => {\n      this.itemSizeCache = /* @__PURE__ */new Map();\n      this.notify(false);\n    };\n    this.setOptions(opts);\n    this.scrollRect = this.options.initialRect;\n    this.scrollOffset = this.options.initialOffset;\n    this.measurementsCache = this.options.initialMeasurementsCache;\n    this.measurementsCache.forEach(item => {\n      this.itemSizeCache.set(item.key, item.size);\n    });\n    this.maybeNotify();\n  }\n}\nconst findNearestBinarySearch = (low, high, getCurrentValue, value) => {\n  while (low <= high) {\n    const middle = (low + high) / 2 | 0;\n    const currentValue = getCurrentValue(middle);\n    if (currentValue < value) {\n      low = middle + 1;\n    } else if (currentValue > value) {\n      high = middle - 1;\n    } else {\n      return middle;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nfunction calculateRange(_ref6) {\n  let {\n    measurements,\n    outerSize,\n    scrollOffset\n  } = _ref6;\n  const count = measurements.length - 1;\n  const getOffset = index => measurements[index].start;\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset);\n  let endIndex = startIndex;\n  while (endIndex < count && measurements[endIndex].end < scrollOffset + outerSize) {\n    endIndex++;\n  }\n  return {\n    startIndex,\n    endIndex\n  };\n}\nexport { Virtualizer, approxEqual, defaultKeyExtractor, defaultRangeExtractor, elementScroll, measureElement, memo, notUndefined, observeElementOffset, observeElementRect, observeWindowOffset, observeWindowRect, windowScroll };","map":{"version":3,"names":["defaultKeyExtractor","index","defaultRangeExtractor","range","start","Math","max","startIndex","overscan","end","min","endIndex","count","arr","i","push","observeElementRect","instance","cb","element","scrollElement","handler","rect","width","height","round","getBoundingClientRect","ResizeObserver","observer","entries","entry","borderBoxSize","box","inlineSize","blockSize","observe","unobserve","observeWindowRect","innerWidth","innerHeight","addEventListener","passive","removeEventListener","observeElementOffset","options","horizontal","observeWindowOffset","measureElement","size","windowScroll","offset","_ref","adjustments","behavior","toOffset","_b","_a","scrollTo","call","elementScroll","_ref2","Virtualizer","constructor","opts","_this","unsubs","isScrolling","isScrollingTimeoutId","scrollToIndexTimeoutId","measurementsCache","itemSizeCache","Map","pendingMeasuredCacheIndexes","scrollDirection","scrollAdjustments","measureElementCache","_ro","get","forEach","_measureElement","target","disconnect","setOptions","opts2","Object","_ref3","key","value","debug","initialOffset","paddingStart","paddingEnd","scrollPaddingStart","scrollPaddingEnd","getItemKey","rangeExtractor","onChange","initialRect","scrollMargin","gap","scrollingDelay","indexAttribute","initialMeasurementsCache","lanes","notify","sync","maybeNotify","memo","calculateRange","process","env","NODE_ENV","initialDeps","cleanup","filter","Boolean","d","_didMount","_willUpdate","getScrollElement","_scrollToOffset","scrollOffset","scrollRect","clearTimeout","setTimeout","getSize","memoOptions","getFurthestMeasurement","measurements","furthestMeasurementsFound","furthestMeasurements","m","measurement","has","lane","previousFurthestMeasurement","set","Array","from","values","sort","a","b","getMeasurements","_ref4","length","slice","furthestMeasurement","measuredSize","estimateSize","outerSize","getIndexes","indexFromElement","node","attributeName","indexStr","getAttribute","console","warn","parseInt","item","isConnected","cached","delete","prevNode","measuredItemSize","resizeItem","itemSize","delta","info","getVirtualItems","indexes","virtualItems","k","len","getVirtualItemForOffset","notUndefined","findNearestBinarySearch","getOffsetForAlignment","align","scrollSizeProp","scrollSize","document","documentElement","maxOffset","getOffsetForIndex","arguments","undefined","isDynamicMode","cancelScrollToIndex","scrollToOffset","scrollToIndex","initialAlign","elementInDOM","toOffset2","approxEqual","scrollBy","getTotalSize","map","_ref5","scrollToFn","measure","low","high","getCurrentValue","middle","currentValue","_ref6","getOffset"],"sources":["/media/shoumik/Others/Workspace/Company Task/Simple_task_app/node_modules/@tanstack/virtual-core/src/index.ts"],"sourcesContent":["import { approxEqual, memo, notUndefined } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n}\n\nexport interface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(element.getBoundingClientRect())\n\n  if (typeof ResizeObserver === 'undefined') {\n    return () => {}\n  }\n\n  const observer = new ResizeObserver((entries) => {\n    const entry = entries[0]\n    if (entry?.borderBoxSize) {\n      const box = entry.borderBoxSize[0]\n      if (box) {\n        handler({ width: box.inlineSize, height: box.blockSize })\n        return\n      }\n    }\n    handler(element.getBoundingClientRect())\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (offset: number) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb(element[instance.options.horizontal ? 'scrollLeft' : 'scrollTop'])\n  }\n  handler()\n\n  element.addEventListener('scroll', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: (offset: number) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb(element[instance.options.horizontal ? 'scrollX' : 'scrollY'])\n  }\n  handler()\n\n  element.addEventListener('scroll', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    sync: boolean,\n  ) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  scrollMargin?: number\n  gap?: number\n  scrollingDelay?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: VirtualItem[]\n  lanes?: number\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  isScrolling: boolean = false\n  private isScrollingTimeoutId: ReturnType<typeof setTimeout> | null = null\n  private scrollToIndexTimeoutId: ReturnType<typeof setTimeout> | null = null\n  measurementsCache: VirtualItem[] = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: number[] = []\n  scrollRect: Rect\n  scrollOffset: number\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments: number = 0\n  measureElementCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      } else if (typeof ResizeObserver !== 'undefined') {\n        return (_ro = new ResizeObserver((entries) => {\n          entries.forEach((entry) => {\n            this._measureElement(entry.target as TItemElement, entry)\n          })\n        }))\n      } else {\n        return null\n      }\n    }\n\n    return {\n      disconnect: () => get()?.disconnect(),\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } | null = null\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset = this.options.initialOffset\n    this.measurementsCache = this.options.initialMeasurementsCache\n    this.measurementsCache.forEach((item) => {\n      this.itemSizeCache.set(item.key, item.size)\n    })\n\n    this.maybeNotify()\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      gap: 0,\n      scrollingDelay: 150,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      ...opts,\n    }\n  }\n\n  private notify = (sync: boolean) => {\n    this.options.onChange?.(this, sync)\n  }\n\n  private maybeNotify = memo(\n    () => {\n      this.calculateRange()\n\n      return [\n        this.isScrolling,\n        this.range ? this.range.startIndex : null,\n        this.range ? this.range.endIndex : null,\n      ]\n    },\n    (isScrolling) => {\n      this.notify(isScrolling)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'maybeNotify',\n      debug: () => this.options.debug,\n      initialDeps: [\n        this.isScrolling,\n        this.range ? this.range.startIndex : null,\n        this.range ? this.range.endIndex : null,\n      ] as [boolean, number | null, number | null],\n    },\n  )\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    this.measureElementCache.forEach(this.observer.observe)\n    return () => {\n      this.observer.disconnect()\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n\n      this._scrollToOffset(this.scrollOffset, {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.maybeNotify()\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset) => {\n          this.scrollAdjustments = 0\n\n          if (this.scrollOffset === offset) {\n            return\n          }\n\n          if (this.isScrollingTimeoutId !== null) {\n            clearTimeout(this.isScrollingTimeoutId)\n            this.isScrollingTimeoutId = null\n          }\n\n          this.isScrolling = true\n          this.scrollDirection =\n            this.scrollOffset < offset ? 'forward' : 'backward'\n          this.scrollOffset = offset\n\n          this.maybeNotify()\n\n          this.isScrollingTimeoutId = setTimeout(() => {\n            this.isScrollingTimeoutId = null\n            this.isScrolling = false\n            this.scrollDirection = null\n\n            this.maybeNotify()\n          }, this.options.scrollingDelay)\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private memoOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getFurthestMeasurement = (\n    measurements: VirtualItem[],\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n          if (a.end === b.end) {\n            return a.index - b.index\n          }\n\n          return a.end - b.end\n        })[0]\n      : undefined\n  }\n\n  private getMeasurements = memo(\n    () => [this.memoOptions(), this.itemSizeCache],\n    ({ count, paddingStart, scrollMargin, getItemKey }, itemSizeCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end + this.options.gap\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      return (this.range =\n        measurements.length > 0 && outerSize > 0\n          ? calculateRange({\n              measurements,\n              outerSize,\n              scrollOffset,\n            })\n          : null)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.calculateRange(),\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return range === null\n        ? []\n        : rangeExtractor({\n            ...range,\n            overscan,\n            count,\n          })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const item = this.measurementsCache[this.indexFromElement(node)]\n\n    if (!item || !node.isConnected) {\n      this.measureElementCache.forEach((cached, key) => {\n        if (cached === node) {\n          this.observer.unobserve(node)\n          this.measureElementCache.delete(key)\n        }\n      })\n      return\n    }\n\n    const prevNode = this.measureElementCache.get(item.key)\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.measureElementCache.set(item.key, node)\n    }\n\n    const measuredItemSize = this.options.measureElement(node, entry, this)\n\n    this.resizeItem(item, measuredItemSize)\n  }\n\n  resizeItem = (item: VirtualItem, size: number) => {\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n    const delta = size - itemSize\n\n    if (delta !== 0) {\n      if (item.start < this.scrollOffset + this.scrollAdjustments) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.scrollOffset, {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(item.index)\n      this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size))\n\n      this.notify(false)\n    }\n  }\n\n  measureElement = (node: TItemElement | null) => {\n    if (!node) {\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: VirtualItem[] = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (toOffset: number, align: ScrollAlignment) => {\n    const size = this.getSize()\n\n    if (align === 'auto') {\n      if (toOffset <= this.scrollOffset) {\n        align = 'start'\n      } else if (toOffset >= this.scrollOffset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n      toOffset = toOffset\n    } else if (align === 'end') {\n      toOffset = toOffset - size\n    } else if (align === 'center') {\n      toOffset = toOffset - size / 2\n    }\n\n    const scrollSizeProp = this.options.horizontal\n      ? 'scrollWidth'\n      : 'scrollHeight'\n    const scrollSize = this.scrollElement\n      ? 'document' in this.scrollElement\n        ? this.scrollElement.document.documentElement[scrollSizeProp]\n        : this.scrollElement[scrollSizeProp]\n      : 0\n\n    const maxOffset = scrollSize - this.getSize()\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const measurement = notUndefined(this.getMeasurements()[index])\n\n    if (align === 'auto') {\n      if (\n        measurement.end >=\n        this.scrollOffset + this.getSize() - this.options.scrollPaddingEnd\n      ) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        this.scrollOffset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return [this.scrollOffset, align] as const\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? measurement.end + this.options.scrollPaddingEnd\n        : measurement.start - this.options.scrollPaddingStart\n\n    return [this.getOffsetForAlignment(toOffset, align), align] as const\n  }\n\n  private isDynamicMode = () => this.measureElementCache.size > 0\n\n  private cancelScrollToIndex = () => {\n    if (this.scrollToIndexTimeoutId !== null) {\n      clearTimeout(this.scrollToIndexTimeoutId)\n      this.scrollToIndexTimeoutId = null\n    }\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    const [toOffset, align] = this.getOffsetForIndex(index, initialAlign)\n\n    this._scrollToOffset(toOffset, { adjustments: undefined, behavior })\n\n    if (behavior !== 'smooth' && this.isDynamicMode()) {\n      this.scrollToIndexTimeoutId = setTimeout(() => {\n        this.scrollToIndexTimeoutId = null\n\n        const elementInDOM = this.measureElementCache.has(\n          this.options.getItemKey(index),\n        )\n\n        if (elementInDOM) {\n          const [toOffset] = this.getOffsetForIndex(index, align)\n\n          if (!approxEqual(toOffset, this.scrollOffset)) {\n            this.scrollToIndex(index, { align, behavior })\n          }\n        } else {\n          this.scrollToIndex(index, { align, behavior })\n        }\n      })\n    }\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.scrollOffset + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () => {\n    const measurements = this.getMeasurements()\n\n    let end: number\n    // If there are no measurements, set the end to paddingStart\n    if (measurements.length === 0) {\n      end = this.options.paddingStart\n    } else {\n      // If lanes is 1, use the last measurement's end, otherwise find the maximum end value among all measurements\n      end =\n        this.options.lanes === 1\n          ? measurements[measurements.length - 1]?.end ?? 0\n          : Math.max(\n              ...measurements.slice(-this.options.lanes).map((m) => m.end),\n            )\n    }\n\n    return end - this.options.scrollMargin + this.options.paddingEnd\n  }\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.notify(false)\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: VirtualItem[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}